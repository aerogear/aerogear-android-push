/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'


project.afterEvaluate {
    def androidExtension = project.extensions.findByName("android")
    if (androidExtension.hasProperty('libraryVariants')) {
        androidExtension.libraryVariants.all { final variant ->
            task("${variant.name}Javadoc", type: Javadoc) {
                description "Generates Javadoc for ${variant.name}."
                failOnError = false
                source = variant.javaCompile.source
                classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
                exclude '**/BuildConfig.java'
                exclude '**/R.java'
            }
        }
    }
    task androidJavadocsJar(type: Jar, dependsOn: 'releaseJavadoc') {
        classifier = 'javadoc'
        from {
            releaseJavadoc.destinationDir
        }
    }
    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from androidExtension.sourceSets.main.java.srcDirs
    }
    publishing.publications {
        release(MavenPublication) {
            groupId POM_GROUP_ID
            artifactId POM_ARTIFACT_ID
            version VERSION_NAME

            artifact bundleReleaseAar
            artifact androidJavadocsJar
            artifact androidSourcesJar


            pom.withXml {
                // List all compile dependencies and write to POM
                final Node dependenciesNode = asNode().appendNode('dependencies')
                final compileConfiguration = configurations.getByName('compile')
                compileConfiguration.allDependencies.each { final Dependency dependency ->
                    final def noGroup = dependency.group == null
                    final def noVersion = dependency.version == null
                    final def noName = dependency.name == null
                    final def invalidName = dependency.name == "unspecified"
                    final def invalidDependency = noGroup || noVersion || noName || invalidName
                    if (invalidDependency) {
                        // ignore invalid dependencies
                        return
                    }
                    final def dependencyFiles = compileConfiguration.files(dependency)
                    final def firstFile = dependencyFiles.first()
                    final def firstFileName = firstFile.name
                    final def firstFileNameExtension = firstFileName.substring(firstFileName.lastIndexOf(".") + 1)

                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dependency.group)
                    dependencyNode.appendNode('artifactId', dependency.name)
                    dependencyNode.appendNode('version', dependency.version)
                    dependencyNode.appendNode('type', firstFileNameExtension)

                    if (!dependency.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dependency.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        final exclusionsNode = dependencyNode.appendNode('exclusions')
                        dependency.properties.excludeRules.each { final ExcludeRule rule ->
                            final exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
            }
        }
    }
}
//
//def isReleaseBuild() {
//    return VERSION_NAME.contains("SNAPSHOT") == false
//}
//
//def getReleaseRepositoryUrl() {
//    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
//            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
//}
//
//def getSnapshotRepositoryUrl() {
//    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
//            : "https://oss.sonatype.org/content/repositories/snapshots/"
//}
//
//def getRepositoryUsername() {
//    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
//}
//
//def getRepositoryPassword() {
//    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
//}


//afterEvaluate { project ->
//
//
//
//    uploadArchives {
//        repositories {
//            mavenDeployer {
//                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//
//                pom.groupId = POM_GROUP_ID
//                pom.artifactId = POM_ARTIFACT_ID
//                pom.version = VERSION_NAME
//
//                repository(url: getReleaseRepositoryUrl()) {
//                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
//                }
//                snapshotRepository(url: getSnapshotRepositoryUrl()) {
//                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
//                }
//
//                pom.project {
//                    name POM_NAME
//                    packaging POM_PACKAGING
//                    description POM_DESCRIPTION
//                    url POM_URL
//
//                    scm {
//                        url POM_SCM_URL
//                        connection POM_SCM_CONNECTION
//                        developerConnection POM_SCM_DEV_CONNECTION
//                    }
//
//                    licenses {
//                        license {
//                            name POM_LICENCE_NAME
//                            url POM_LICENCE_URL
//                            distribution POM_LICENCE_DIST
//                        }
//                    }
//
//                    developers {
//                        developer {
//                            id POM_DEVELOPER_ID
//                            name POM_DEVELOPER_NAME
//                        }
//                    }
//                }
//            }
//        }
//    }
//
//    signing {
//        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
//        sign configurations.archives
//    }
//
//    android.libraryVariants.all { variant ->
//        def javadocTask = task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
//            description "Generates Javadoc for $variant.name."
//            source = variant.javaCompileProvider.get().source
//            ext.androidJar = project.files(android.getBootClasspath().join(File.pathSeparator))
//            classpath = files(variant.javaCompileProvider.get().classpath.files) + files(ext.androidJar)
//            exclude '**/BuildConfig.java'
//            exclude '**/R.java'
//        }
//
//        javadocTask.dependsOn variant.javaCompileProvider.get()
//
//        def jarJavadocTask = task("jar${variant.name.capitalize()}Javadoc", type: Jar) {
//            description "Generate Javadoc Jar for $variant.name"
//            archiveClassifier = 'javadoc'
//            from javadocTask.destinationDir
//        }
//
//        jarJavadocTask.dependsOn javadocTask
//        artifacts.add('archives', jarJavadocTask)
//
//        def jarSourceTask = task("jar${variant.name.capitalize()}Sources", type: Jar) {
//            description "Generates Java Sources for $variant.name."
//            archiveClassifier = 'sources'
//            from variant.javaCompileProvider.get().source
//        }
//
//        jarSourceTask.dependsOn variant.javaCompileProvider.get()
//        artifacts.add('archives', jarSourceTask)
//    }
//}
